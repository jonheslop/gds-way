---
title: Using Node.js at GDS
---

# <%= current_page.data.title %>

## Important Note

No new projects at GDS should use Node.js without prior consultation with the 
Deputy Director Technology Operations. The [programming language recommendations](../../../standards/programming-languages.html#javascript) 
section has more detail on how we currently use Node.js at GDS and why this 
decision has been made.

## Guidance
The guidance set out here should be followed in conjunction with the advice 
on the main [programming languages manual page](../../programming-languages.html).

If you want to add guidance on Node.js please see [Updating this manual](#updating-this-manual) below.

### Style
#### Formatting and linting
To maintain consistent and readable style we use a few tools to keep our javascript 
consistent. We use [Prettier] to format code and [xo] for linting, with a config to make it [Standard] like. 
To make sure everything stays clean we recommend running these tools pre-commit. 
Both [Prettier] and [xo] have can autofix common errors and have clear error 
messaging when they can’t. This is how the our [xo] config looks:

``` json
// package.json
{
  "xo": {
    "extends": [
      "prettier"
    ],
    "ignore": [
      "node_modules/**/*.*"
    ],
    "rules": {
      "space-before-function-paren": [
        "error",
        {
          "anonymous": "always",
          "named": "always",
          "asyncArrow": "always"
        }
      ],
      "quotes": [
        "error",
        "single",
        {
          "avoidEscape": true,
          "allowTemplateLiterals": true
        }
      ]
    },
    "semicolon": false
  },
}
```

We’ve encapsulated our recommended process into a [repo](https://github.com/jonheslop/nodejs-starter) where everything is controlled 
by a few lines of config within your `package.json`. Once you have ran `npm install` any time 
you make a commit [xo] runs and formats your code with [Prettier] and lints it 
with [xo], it will autofix small errors and continue with your commit, if there’s 
something it can’t fix then the commit fails with a useful error message like:

```
✖ xo --fix found some errors. Please fix them and try committing again.

app/utils/email_tools.js:1:1
✖  1:1  Filename is not in kebab case. Rename it to email-tools.js.  unicorn/filename-case
```

#### Editor plugins
It’s nicer to know about lint errors before commit and you get live linting in 
your text editor of choice by installing on of [xo’s plugins](https://github.com/sindresorhus/xo#editor-plugins), if you use a more heavyweight IDE then you can use 
[ESLint plugin](https://eslint.org/docs/user-guide/integrations) instead. 
[SublimeLinter](http://www.sublimelinter.com/) also will just ‘work’ with this config.

### Structure
As well as having consistent code style is important that our projects and repos 
are structured in similar ways so that developers can find things quickly and 
easily. We want our code to be modular and reusable and so our project structure 
should reflect this. Below are our four guiding principles (hat tip to [Rising Stack](https://blog.risingstack.com/) for this [blog post](https://blog.risingstack.com/node-hero-node-js-project-structure-tutorial/)).

#### Organise files around features, not roles
This structure means you don’t require lots of context switching to find related 
functions and that your `require` statements don’t have overly complicated paths.

```
├── product
|   ├── index.js
|   ├── product.js
|   ├── product.spec.js
|   └── product.njk
├── user
|   ├── index.js
|   ├── user.js
|   ├── user.spec.js
|   └── user.njk
```

#### Don’t put logic in index.js files
Use these files to `require` all the modules functions.

```js
// product/index.js
const product = require('./product')

module.exports = {
  create: product.create
}
```

#### Store test files within the implementation
Keeping tests in the same directory makes them easier to find and makes it obvious 
when a test is missing. Although do keep reusable test config and setup scripts 
in a separate `test` directory.

```
├── test
|   └── setup.spec.js
├── product
|   ├── index.js
|   ├── product.js
|   ├── product.spec.js
|   └── product.njk
```

#### Use a config directory
Keep your configuration together in a config folder

```
├── config
|   ├── index.js
|   └── server.js
├── product
├── user
```

### Versions
We should only use <abbr title="Long term support">LTS</abbr> versions of Node.js, these are even numbered versions (Node 6.x or 8.x).
However it is important to keep an eye on the [Node.js LTS Schedule] as to when versions move in and out of LTS.

### Futher resources
* **[Node.js best practices]** — A comprehensive guide to Node.js best practices
* **[node.cool]** — A curated list of Node.js packages and resources by Sindre Sorhus
* **[Node ES2015 support]** — Check Node.js support for ES2015+ features
* **[JS documentation]** — MDN's definitive JS docs

## Updating this manual
This manual, is not presumed to be infallible or beyond dispute.
If you think something is missing or if you'd like to see something changed then:

1. _(optional)_ Start with the [#Nodejs] community's Slack channel. See what other developers think and you'll get an idea
of how likely your proposal is of being accepted as a pull request even before you put in any work.
2. Check out the making changes section of the [GDS Tech repo][github-gds-tech-readme-making-changes]
3. Create a pull request against [GDS Tech repo][github-gds-tech]

[github-gds-tech]: https://github.com/alphagov/gds-tech
[github-gds-tech-readme-making-changes]: https://github.com/alphagov/gds-tech/blob/master/README.md#making-changes
[standard]: https://standardjs.com/
[Node.js LTS Schedule]: https://github.com/nodejs/Release
[#Nodejs]: https://govuk.slack.com/messages/nodejs
[node.cool]: https://node.cool
[Node ES2015 support]: http://node.green/
[JS documentation]: https://developer.mozilla.org/en-US/docs/Web/JavaScript
[Node.js best practices]: https://github.com/i0natan/nodebestpractices
[Prettier]: https://prettier.io/
[xo]: https://github.com/sindresorhus/xo
[Standard]: https://standardjs.com/
